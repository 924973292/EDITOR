import torch
import torch.nn as nn
from ..fusion_part.MLP import Mlp
from ..fusion_part.DropPath import DropPath
from layers.transfer_loss.mmd import MMDLoss
import math


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        print("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
              "The distribution of values may be incorrect.", )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `model.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = model.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


class CA(nn.Module):
    def __init__(self, dim, num_heads=12, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.normx = nn.LayerNorm(dim)
        self.normy = nn.LayerNorm(dim)
        self.normz = nn.LayerNorm(dim)
        self.num_heads = num_heads
        head_dim = dim // num_heads
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = qk_scale or head_dim ** -0.5
        self.q_ = nn.Linear(dim, dim, bias=qkv_bias)
        self.k_x = nn.Linear(dim, dim, bias=qkv_bias)
        self.v_x = nn.Linear(dim, dim, bias=qkv_bias)
        self.k_y = nn.Linear(dim, dim, bias=qkv_bias)
        self.v_y = nn.Linear(dim, dim, bias=qkv_bias)
        self.k_z = nn.Linear(dim, dim, bias=qkv_bias)
        self.v_z = nn.Linear(dim, dim, bias=qkv_bias)
        self.reduction3 = nn.Linear(3 * dim, dim)
        self.reduction2 = nn.Linear(2 * dim, dim)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

        self.y_gate_linear = nn.Linear(dim, 1)
        self.z_gate_linear = nn.Linear(dim, 1)

    def forward(self, x, y, z):
        B, N, C = y.shape
        x = self.normx(x)
        cls = x[:, 0, :]
        x = x[:, 1:, :]
        y = self.normy(y)
        if z != None:
            z = self.normz(z)
            y_gate = torch.tanh(self.y_gate_linear(torch.mean(y, dim=1)))
            z_gate = torch.tanh(self.z_gate_linear(torch.mean(z, dim=1)))

            q = self.q_(cls).reshape(B, 1, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)

            k_x = self.k_x(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
            v_x = self.v_x(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
            k_y = self.k_y(y).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
            v_y = self.v_y(y).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
            k_z = self.k_z(z).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
            v_z = self.v_z(z).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)

            attn_x = (q @ k_x.transpose(-2, -1)) * self.scale
            attn_x = attn_x.softmax(dim=-1)
            attn_x = self.attn_drop(attn_x)

            attn_y = (q @ k_y.transpose(-2, -1)) * self.scale
            attn_y = attn_y.softmax(dim=-1)
            attn_y = self.attn_drop(attn_y)

            attn_z = (q @ k_z.transpose(-2, -1)) * self.scale
            attn_z = attn_z.softmax(dim=-1)
            attn_z = self.attn_drop(attn_z)

            x_x = (attn_x @ v_x).transpose(1, 2)
            x_x = x_x.reshape(B, C)

            x_y = (attn_y @ v_y).transpose(1, 2)
            x_y = x_y.reshape(B, C)

            x_z = (attn_z @ v_z).transpose(1, 2)
            x_z = x_z.reshape(B, C)

            x = torch.cat([x_x, x_y * y_gate, x_z * z_gate], dim=1)

            x = self.reduction3(x)
            x = self.proj(x)
            x = self.proj_drop(x)
            return x
        else:
            y_gate = torch.tanh(self.y_gate_linear(torch.mean(y, dim=1)))
            q = self.q_(cls).reshape(B, 1, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)

            k_x = self.k_x(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
            v_x = self.v_x(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
            k_y = self.k_y(y).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
            v_y = self.v_y(y).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)

            attn_x = (q @ k_x.transpose(-2, -1)) * self.scale
            attn_x = attn_x.softmax(dim=-1)
            attn_x = self.attn_drop(attn_x)

            attn_y = (q @ k_y.transpose(-2, -1)) * self.scale
            attn_y = attn_y.softmax(dim=-1)
            attn_y = self.attn_drop(attn_y)

            x_x = (attn_x @ v_x).transpose(1, 2)
            x_x = x_x.reshape(B, C)

            x_y = (attn_y @ v_y).transpose(1, 2)
            x_y = x_y.reshape(B, C)

            x = torch.cat([x_x, x_y * y_gate], dim=1)
            # x = torch.cat([x_x, x_y, x_z], dim=1)
            x = self.reduction2(x)
            x = self.proj(x)
            x = self.proj_drop(x)
            return x


class CAC(nn.Module):
    def __init__(self, dim, num_heads=12, qkv_bias=False, qk_scale=None, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.normx = nn.LayerNorm(dim)
        self.normy = nn.LayerNorm(dim)
        self.num_heads = num_heads
        head_dim = dim // num_heads
        # NOTE scale factor was wrong in my original version, can set manually to be compat with prev weights
        self.scale = qk_scale or head_dim ** -0.5
        self.q_ = nn.Linear(dim, dim, bias=qkv_bias)
        self.k_x = nn.Linear(dim, dim, bias=qkv_bias)
        self.v_x = nn.Linear(dim, dim, bias=qkv_bias)
        self.k_y = nn.Linear(dim, dim, bias=qkv_bias)
        self.v_y = nn.Linear(dim, dim, bias=qkv_bias)
        self.reduction = nn.Linear(2 * dim, dim)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

        self.y_gate_linear = nn.Linear(dim, 1)
        self.z_gate_linear = nn.Linear(dim, 1)

    def forward(self, x, y, z):
        B, N, C = y.shape
        x = self.normx(x)
        cls = x[:, 0, :]
        x = x[:, 1:, :]
        y = self.normy(y)

        y_gate = torch.sigmoid(self.y_gate_linear(torch.mean(y, dim=1)))

        q = self.q_(cls).reshape(B, 1, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)

        k_x = self.k_x(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
        v_x = self.v_x(x).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
        k_y = self.k_y(y).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)
        v_y = self.v_y(y).reshape(B, N, self.num_heads, C // self.num_heads).permute(0, 2, 1, 3)

        attn_x = (q @ k_x.transpose(-2, -1)) * self.scale
        attn_x = attn_x.softmax(dim=-1)
        attn_x = self.attn_drop(attn_x)

        attn_y = (q @ k_y.transpose(-2, -1)) * self.scale
        attn_y = attn_y.softmax(dim=-1)
        attn_y = self.attn_drop(attn_y)

        x_x = (attn_x @ v_x).transpose(1, 2)
        x_x = x_x.reshape(B, C)

        x_y = (attn_y @ v_y).transpose(1, 2)
        x_y = x_y.reshape(B, C)

        x = torch.cat([x_x, x_y * y_gate], dim=1)
        x = self.reduction(x)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x


class CABlock(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.attn = CA(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, y, z):
        x = x[:, 0, :] + self.drop_path(self.attn(x, y, z))
        x = x + self.drop_path(self.mlp(self.norm(x)))
        return x


class CABlockC(nn.Module):

    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.attn = CAC(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop)
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, y, z):
        x = x[:, 0, :] + self.drop_path(self.attn(x, y, z))
        x = x + self.drop_path(self.mlp(self.norm(x)))
        return x


class CAModality(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.ca = CABlock(dim, num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop,
                          attn_drop=attn_drop,
                          drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer)

    def forward(self, x, y, z):
        x = self.ca(x, y, z)
        return x


class CAModalityC(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.ca = CABlockC(dim, num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop,
                           attn_drop=attn_drop,
                           drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer)

    def forward(self, x, y):
        x = self.ca(x, y)
        return x


class FUSEAll(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.RGBCA = CAModality(dim, num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop,
                                attn_drop=attn_drop,
                                drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer)
        self.NICA = CAModality(dim, num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop,
                               attn_drop=attn_drop,
                               drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer)
        self.TICA = CAModality(dim, num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop,
                               attn_drop=attn_drop,
                               drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer)
        self.reduction3 = nn.Linear(3 * dim, dim)
        self.reduction2 = nn.Linear(2 * dim, dim)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward(self, RGB_cls4tri, RGB_patch, NIR_cls4tri, NIR_patch, TIR_cls4tri=None, TIR_patch=None):
        x = self.RGBCA(torch.cat([RGB_cls4tri.unsqueeze(1), RGB_patch], dim=1), NIR_patch, TIR_patch)
        y = self.NICA(torch.cat([NIR_cls4tri.unsqueeze(1), NIR_patch], dim=1), RGB_patch, TIR_patch)
        if TIR_cls4tri != None:
            z = self.TICA(torch.cat([TIR_cls4tri.unsqueeze(1), TIR_patch], dim=1), RGB_patch, NIR_patch)
            x = self.reduction3(torch.cat([x, y, z], dim=1))
        else:
            # x = self.reduction2(torch.cat([x, y], dim=1))
            return x,y


class FUSEAllC(nn.Module):
    def __init__(self, dim, num_heads, mlp_ratio=4., qkv_bias=False, qk_scale=None, drop=0., attn_drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()
        self.RGBCA = CAModalityC(dim, num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop,
                                 attn_drop=attn_drop,
                                 drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer)
        self.NICA = CAModalityC(dim, num_heads, mlp_ratio=mlp_ratio, qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop,
                                attn_drop=attn_drop,
                                drop_path=drop_path, act_layer=act_layer, norm_layer=norm_layer)

        self.reduction = nn.Linear(2 * dim, dim)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward(self, RGB_cls4tri, NIR_cls4tri, RGB_patch, NIR_patch):
        x = self.RGBCA(torch.cat([RGB_cls4tri.unsqueeze(1), RGB_patch], dim=1), NIR_patch)
        y = self.NICA(torch.cat([NIR_cls4tri.unsqueeze(1), NIR_patch], dim=1), RGB_patch)
        x = self.reduction(torch.cat([x, y], dim=1))
        return x
