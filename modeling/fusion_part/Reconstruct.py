import torch
import torch.nn as nn
from ..fusion_part.MLP import Mlp
from ..fusion_part.DropPath import DropPath
from ..backbones.vit_pytorch import Attention
from layers.transfer_loss.mmd import MMDLoss
import math


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        print("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
              "The distribution of values may be incorrect.", )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    # type: (Tensor, float, float, float, float) -> Tensor
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `model.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = model.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


class RBlock(nn.Module):
    def __init__(self, dim, mlp_ratio=4., drop=0.,
                 drop_path=0., act_layer=nn.GELU, norm_layer=nn.LayerNorm):
        super().__init__()

        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=12, qkv_bias=False, qk_scale=False, attn_drop=0., proj_drop=0.)
        # NOTE: drop path for stochastic depth, we shall see if this is better than dropout here
        self.drop_path = DropPath(drop_path) if drop_path > 0. else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x):
        x = x + self.drop_path(self.attn(self.norm1(x)))
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x


class RModality(nn.Module):

    def __init__(self, dim, depth):
        super().__init__()
        self.RBlocks = nn.ModuleList([RBlock(dim) for i in range(depth)])
        self.norm_b = nn.BatchNorm1d(dim)
        self.norm = nn.LayerNorm(dim)


    def forward(self, x):
        # B, N, C = x.shape
        # cls_token = self.cls_token.expand(B, -1, -1)
        # x = torch.cat((cls_token, x), dim=1)
        for index, blk in enumerate(self.RBlocks):
            x = blk(x)
        x = self.norm(x)
        return x


class RAll(nn.Module):

    def __init__(self, dim, depth=4):
        super().__init__()
        self.BATCH_FUSE = RModality(dim, depth=depth)
        self.apply(self._init_weights)
        self.mmd = MMDLoss()
        print("RECONSTRUCT HERE!!!")

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward(self, x):
        if self.training:
            B = x.shape[0] // 3
            x = self.BATCH_FUSE(x)
            cls = torch.mean(x, dim=-2)
            ma_cls = cls[:B, :]
            mb_cls = cls[B:2 * B, :]
            mc_cls = cls[2 * B:, :]
            loss = self.mmd(ma_cls, mb_cls) + self.mmd(ma_cls, mc_cls) + self.mmd(mb_cls, mc_cls)
            return cls, loss
        else:
            return torch.mean(self.BATCH_FUSE(x), dim=-2)


class RAllC(nn.Module):

    def __init__(self, dim, depth=4):
        super().__init__()
        self.RGBRE = RModality(dim, depth=depth)
        self.NIRE = RModality(dim, depth=depth)
        self.apply(self._init_weights)
        self.mmd = MMDLoss()
        print("RECONSTRUCT HERE!!!")

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def forward(self, ma, mb):
        ma = self.RGBRE(ma)
        mb = self.NIRE(mb)
        ma_cls = ma[:, 0, :]
        mb_cls = mb[:, 0, :]
        ma_patch = torch.mean(ma[:, 1:, :], dim=1)
        mb_patch = torch.mean(mb[:, 1:, :], dim=1)
        if self.training:
            loss = self.mmd(ma_cls, mb_cls)
            return ma_patch, mb_patch, loss
        else:
            return ma_cls, mb_cls
